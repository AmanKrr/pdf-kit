class AnnotationService{constructor(n,t){this.annotations=new Map,this.annotationManagers=new Map,n.on("ANNOTATION_CREATED",n=>this.updateAnnotationMap(n)),n.on("ANNOTATION_DELETED",n=>this.deleteAnnotation(n)),this.goTo=t.goToPage.bind(t)}isAnnotationManagerRegistered(n){return this.annotationManagers.get(n)}registerAnnotationManager(n,t){this.annotationManagers.set(n,t);n=this.annotations.get(n);n&&n.forEach(n=>{t.addAnnotation(n)})}unregisterAnnotationManager(n){var t;null!=(t=this.annotationManagers.get(n))&&t.destroy(),this.annotationManagers.delete(n)}addAnnotation(n){let t=Object.assign(Object.assign({},n),{id:this.generateUniqueId()}),a=t.pageNumber;this.goTo(a);n=this.annotations.get(a)||[];return n.push(t),this.annotations.set(a,n),setTimeout(()=>{var n=this.annotationManagers.get(a);n&&n.addAnnotation(t,!0)},250),t.id}updateAnnotation(t,n){for(var[a,o]of this.annotations.entries()){var e,i=o.findIndex(n=>n.id===t);if(-1!==i)return e=Object.assign(Object.assign({},o[i]),n),o[i]=e,void((o=this.annotationManagers.get(a))&&o.updateAnnotation(e))}throw new Error("Annotation not found")}deleteAnnotation(t){for(var[n,a]of this.annotations.entries()){var o=a.findIndex(n=>n.id===t);if(-1!==o)return a.splice(o,1),void((a=this.annotationManagers.get(n))&&a.deleteAnnotation(t))}throw new Error("Annotation not found")}generateUniqueId(){return"anno-"+Math.random().toString(36).substr(2,9)}updateAnnotationMap(t){if(null==t.pageNumber)throw Error("Page number not found!");var n=t.pageNumber;let a=this.annotations.get(n);var o=(a=a||[]).findIndex(n=>n.id===t.id);0<=o?a[o]=t:a.push(t),this.annotations.set(n,a),console.log(n,a,t)}}export{AnnotationService};